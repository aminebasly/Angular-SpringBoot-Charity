/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Association } from '../models/association';
import { createAssociation } from '../fn/association-controller/create-association';
import { CreateAssociation$Params } from '../fn/association-controller/create-association';
import { deleteAssociation } from '../fn/association-controller/delete-association';
import { DeleteAssociation$Params } from '../fn/association-controller/delete-association';
import { getAllAssociations } from '../fn/association-controller/get-all-associations';
import { GetAllAssociations$Params } from '../fn/association-controller/get-all-associations';
import { getAssociationById } from '../fn/association-controller/get-association-by-id';
import { GetAssociationById$Params } from '../fn/association-controller/get-association-by-id';

@Injectable({ providedIn: 'root' })
export class AssociationControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllAssociations()` */
  static readonly GetAllAssociationsPath = '/api/associations';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllAssociations()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAssociations$Response(params?: GetAllAssociations$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Association>>> {
    return getAllAssociations(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllAssociations$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAssociations(params?: GetAllAssociations$Params, context?: HttpContext): Observable<Array<Association>> {
    return this.getAllAssociations$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Association>>): Array<Association> => r.body)
    );
  }

  /** Path part for operation `createAssociation()` */
  static readonly CreateAssociationPath = '/api/associations';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createAssociation()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createAssociation$Response(params: CreateAssociation$Params, context?: HttpContext): Observable<StrictHttpResponse<Association>> {
    return createAssociation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createAssociation$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createAssociation(params: CreateAssociation$Params, context?: HttpContext): Observable<Association> {
    return this.createAssociation$Response(params, context).pipe(
      map((r: StrictHttpResponse<Association>): Association => r.body)
    );
  }

  /** Path part for operation `getAssociationById()` */
  static readonly GetAssociationByIdPath = '/api/associations/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAssociationById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAssociationById$Response(params: GetAssociationById$Params, context?: HttpContext): Observable<StrictHttpResponse<Association>> {
    return getAssociationById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAssociationById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAssociationById(params: GetAssociationById$Params, context?: HttpContext): Observable<Association> {
    return this.getAssociationById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Association>): Association => r.body)
    );
  }

  /** Path part for operation `deleteAssociation()` */
  static readonly DeleteAssociationPath = '/api/associations/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAssociation()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAssociation$Response(params: DeleteAssociation$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteAssociation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAssociation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAssociation(params: DeleteAssociation$Params, context?: HttpContext): Observable<void> {
    return this.deleteAssociation$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
