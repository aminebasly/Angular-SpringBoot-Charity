/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Case } from '../models/case';
import { deleteCase } from '../fn/case-controller/delete-case';
import { DeleteCase$Params } from '../fn/case-controller/delete-case';
import { getAllCases } from '../fn/case-controller/get-all-cases';
import { GetAllCases$Params } from '../fn/case-controller/get-all-cases';
import { getCaseById } from '../fn/case-controller/get-case-by-id';
import { GetCaseById$Params } from '../fn/case-controller/get-case-by-id';
import { registerCase } from '../fn/case-controller/register-case';
import { RegisterCase$Params } from '../fn/case-controller/register-case';
import { updateCaseStatus } from '../fn/case-controller/update-case-status';
import { UpdateCaseStatus$Params } from '../fn/case-controller/update-case-status';

@Injectable({ providedIn: 'root' })
export class CaseControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateCaseStatus()` */
  static readonly UpdateCaseStatusPath = '/api/cases/{id}/status';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCaseStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateCaseStatus$Response(params: UpdateCaseStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<Case>> {
    return updateCaseStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCaseStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateCaseStatus(params: UpdateCaseStatus$Params, context?: HttpContext): Observable<Case> {
    return this.updateCaseStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<Case>): Case => r.body)
    );
  }

  /** Path part for operation `registerCase()` */
  static readonly RegisterCasePath = '/api/cases/register';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `registerCase()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  registerCase$Response(params: RegisterCase$Params, context?: HttpContext): Observable<StrictHttpResponse<Case>> {
    return registerCase(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `registerCase$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  registerCase(params: RegisterCase$Params, context?: HttpContext): Observable<Case> {
    return this.registerCase$Response(params, context).pipe(
      map((r: StrictHttpResponse<Case>): Case => r.body)
    );
  }

  /** Path part for operation `getAllCases()` */
  static readonly GetAllCasesPath = '/api/cases';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllCases()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCases$Response(params?: GetAllCases$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getAllCases(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllCases$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCases(params?: GetAllCases$Params, context?: HttpContext): Observable<{
}> {
    return this.getAllCases$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getCaseById()` */
  static readonly GetCaseByIdPath = '/api/cases/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCaseById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCaseById$Response(params: GetCaseById$Params, context?: HttpContext): Observable<StrictHttpResponse<Case>> {
    return getCaseById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCaseById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCaseById(params: GetCaseById$Params, context?: HttpContext): Observable<Case> {
    return this.getCaseById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Case>): Case => r.body)
    );
  }

  /** Path part for operation `deleteCase()` */
  static readonly DeleteCasePath = '/api/cases/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCase()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCase$Response(params: DeleteCase$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteCase(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCase$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCase(params: DeleteCase$Params, context?: HttpContext): Observable<void> {
    return this.deleteCase$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
