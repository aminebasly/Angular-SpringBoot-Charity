/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addResponse } from '../fn/support-response-controller/add-response';
import { AddResponse$Params } from '../fn/support-response-controller/add-response';
import { deleteResponse } from '../fn/support-response-controller/delete-response';
import { DeleteResponse$Params } from '../fn/support-response-controller/delete-response';
import { getAllResponses } from '../fn/support-response-controller/get-all-responses';
import { GetAllResponses$Params } from '../fn/support-response-controller/get-all-responses';
import { getResponseById } from '../fn/support-response-controller/get-response-by-id';
import { GetResponseById$Params } from '../fn/support-response-controller/get-response-by-id';
import { getResponsesByRefugeeSupport } from '../fn/support-response-controller/get-responses-by-refugee-support';
import { GetResponsesByRefugeeSupport$Params } from '../fn/support-response-controller/get-responses-by-refugee-support';
import { SupportResponse } from '../models/support-response';
import { updateResponse } from '../fn/support-response-controller/update-response';
import { UpdateResponse$Params } from '../fn/support-response-controller/update-response';

@Injectable({ providedIn: 'root' })
export class SupportResponseControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateResponse()` */
  static readonly UpdateResponsePath = '/api/support-responses/update/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateResponse()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateResponse$Response(params: UpdateResponse$Params, context?: HttpContext): Observable<StrictHttpResponse<SupportResponse>> {
    return updateResponse(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateResponse$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateResponse(params: UpdateResponse$Params, context?: HttpContext): Observable<SupportResponse> {
    return this.updateResponse$Response(params, context).pipe(
      map((r: StrictHttpResponse<SupportResponse>): SupportResponse => r.body)
    );
  }

  /** Path part for operation `addResponse()` */
  static readonly AddResponsePath = '/api/support-responses/add/{refugeeSupportId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addResponse()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addResponse$Response(params: AddResponse$Params, context?: HttpContext): Observable<StrictHttpResponse<SupportResponse>> {
    return addResponse(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addResponse$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addResponse(params: AddResponse$Params, context?: HttpContext): Observable<SupportResponse> {
    return this.addResponse$Response(params, context).pipe(
      map((r: StrictHttpResponse<SupportResponse>): SupportResponse => r.body)
    );
  }

  /** Path part for operation `getResponseById()` */
  static readonly GetResponseByIdPath = '/api/support-responses/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getResponseById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getResponseById$Response(params: GetResponseById$Params, context?: HttpContext): Observable<StrictHttpResponse<SupportResponse>> {
    return getResponseById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getResponseById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getResponseById(params: GetResponseById$Params, context?: HttpContext): Observable<SupportResponse> {
    return this.getResponseById$Response(params, context).pipe(
      map((r: StrictHttpResponse<SupportResponse>): SupportResponse => r.body)
    );
  }

  /** Path part for operation `getResponsesByRefugeeSupport()` */
  static readonly GetResponsesByRefugeeSupportPath = '/api/support-responses/refugee/{refugeeSupportId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getResponsesByRefugeeSupport()` instead.
   *
   * This method doesn't expect any request body.
   */
  getResponsesByRefugeeSupport$Response(params: GetResponsesByRefugeeSupport$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SupportResponse>>> {
    return getResponsesByRefugeeSupport(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getResponsesByRefugeeSupport$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getResponsesByRefugeeSupport(params: GetResponsesByRefugeeSupport$Params, context?: HttpContext): Observable<Array<SupportResponse>> {
    return this.getResponsesByRefugeeSupport$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SupportResponse>>): Array<SupportResponse> => r.body)
    );
  }

  /** Path part for operation `getAllResponses()` */
  static readonly GetAllResponsesPath = '/api/support-responses/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllResponses()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllResponses$Response(params?: GetAllResponses$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SupportResponse>>> {
    return getAllResponses(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllResponses$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllResponses(params?: GetAllResponses$Params, context?: HttpContext): Observable<Array<SupportResponse>> {
    return this.getAllResponses$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SupportResponse>>): Array<SupportResponse> => r.body)
    );
  }

  /** Path part for operation `deleteResponse()` */
  static readonly DeleteResponsePath = '/api/support-responses/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteResponse()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteResponse$Response(params: DeleteResponse$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteResponse(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteResponse$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteResponse(params: DeleteResponse$Params, context?: HttpContext): Observable<void> {
    return this.deleteResponse$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
