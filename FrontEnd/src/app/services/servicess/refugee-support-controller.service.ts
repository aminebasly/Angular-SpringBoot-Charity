/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createRefugeeSupport } from '../fn/refugee-support-controller/create-refugee-support';
import { CreateRefugeeSupport$Params } from '../fn/refugee-support-controller/create-refugee-support';
import { deleteRefugeeSupport } from '../fn/refugee-support-controller/delete-refugee-support';
import { DeleteRefugeeSupport$Params } from '../fn/refugee-support-controller/delete-refugee-support';
import { getAllRefugeeSupports } from '../fn/refugee-support-controller/get-all-refugee-supports';
import { GetAllRefugeeSupports$Params } from '../fn/refugee-support-controller/get-all-refugee-supports';
import { getRefugeeSupportById } from '../fn/refugee-support-controller/get-refugee-support-by-id';
import { GetRefugeeSupportById$Params } from '../fn/refugee-support-controller/get-refugee-support-by-id';
import { getRefugeeSupportsByStatus } from '../fn/refugee-support-controller/get-refugee-supports-by-status';
import { GetRefugeeSupportsByStatus$Params } from '../fn/refugee-support-controller/get-refugee-supports-by-status';
import { RefugeeSupport } from '../models/refugee-support';
import { updateRefugeeSupport } from '../fn/refugee-support-controller/update-refugee-support';
import { UpdateRefugeeSupport$Params } from '../fn/refugee-support-controller/update-refugee-support';

@Injectable({ providedIn: 'root' })
export class RefugeeSupportControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateRefugeeSupport()` */
  static readonly UpdateRefugeeSupportPath = '/api/refugee-support/update/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateRefugeeSupport()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateRefugeeSupport$Response(params: UpdateRefugeeSupport$Params, context?: HttpContext): Observable<StrictHttpResponse<RefugeeSupport>> {
    return updateRefugeeSupport(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateRefugeeSupport$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateRefugeeSupport(params: UpdateRefugeeSupport$Params, context?: HttpContext): Observable<RefugeeSupport> {
    return this.updateRefugeeSupport$Response(params, context).pipe(
      map((r: StrictHttpResponse<RefugeeSupport>): RefugeeSupport => r.body)
    );
  }

  /** Path part for operation `createRefugeeSupport()` */
  static readonly CreateRefugeeSupportPath = '/api/refugee-support/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createRefugeeSupport()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createRefugeeSupport$Response(params: CreateRefugeeSupport$Params, context?: HttpContext): Observable<StrictHttpResponse<RefugeeSupport>> {
    return createRefugeeSupport(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createRefugeeSupport$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createRefugeeSupport(params: CreateRefugeeSupport$Params, context?: HttpContext): Observable<RefugeeSupport> {
    return this.createRefugeeSupport$Response(params, context).pipe(
      map((r: StrictHttpResponse<RefugeeSupport>): RefugeeSupport => r.body)
    );
  }

  /** Path part for operation `getRefugeeSupportById()` */
  static readonly GetRefugeeSupportByIdPath = '/api/refugee-support/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRefugeeSupportById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRefugeeSupportById$Response(params: GetRefugeeSupportById$Params, context?: HttpContext): Observable<StrictHttpResponse<RefugeeSupport>> {
    return getRefugeeSupportById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRefugeeSupportById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRefugeeSupportById(params: GetRefugeeSupportById$Params, context?: HttpContext): Observable<RefugeeSupport> {
    return this.getRefugeeSupportById$Response(params, context).pipe(
      map((r: StrictHttpResponse<RefugeeSupport>): RefugeeSupport => r.body)
    );
  }

  /** Path part for operation `getRefugeeSupportsByStatus()` */
  static readonly GetRefugeeSupportsByStatusPath = '/api/refugee-support/status/{status}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRefugeeSupportsByStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRefugeeSupportsByStatus$Response(params: GetRefugeeSupportsByStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<RefugeeSupport>>> {
    return getRefugeeSupportsByStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRefugeeSupportsByStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRefugeeSupportsByStatus(params: GetRefugeeSupportsByStatus$Params, context?: HttpContext): Observable<Array<RefugeeSupport>> {
    return this.getRefugeeSupportsByStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<RefugeeSupport>>): Array<RefugeeSupport> => r.body)
    );
  }

  /** Path part for operation `getAllRefugeeSupports()` */
  static readonly GetAllRefugeeSupportsPath = '/api/refugee-support/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllRefugeeSupports()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRefugeeSupports$Response(params?: GetAllRefugeeSupports$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<RefugeeSupport>>> {
    return getAllRefugeeSupports(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllRefugeeSupports$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRefugeeSupports(params?: GetAllRefugeeSupports$Params, context?: HttpContext): Observable<Array<RefugeeSupport>> {
    return this.getAllRefugeeSupports$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<RefugeeSupport>>): Array<RefugeeSupport> => r.body)
    );
  }

  /** Path part for operation `deleteRefugeeSupport()` */
  static readonly DeleteRefugeeSupportPath = '/api/refugee-support/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteRefugeeSupport()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRefugeeSupport$Response(params: DeleteRefugeeSupport$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteRefugeeSupport(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteRefugeeSupport$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRefugeeSupport(params: DeleteRefugeeSupport$Params, context?: HttpContext): Observable<void> {
    return this.deleteRefugeeSupport$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
